# Stage 1: Use a slim Python base image and install the 'unzip' utility
FROM python:3.11-slim

# The 'unzip' command is not included in the slim base image, so we install it.
# We also clean up the apt cache in the same layer to reduce image size.
RUN apt-get update && apt-get install -y unzip && rm -rf /var/lib/apt/lists/*

# Stage 2: Set the working directory inside the container
WORKDIR /app

# Stage 3: Copy the requirements file and install Python dependencies
# This is done early to leverage Docker's layer caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Stage 4: Copy only the necessary source code and the smaller .zip files
# This is the key optimization: we avoid copying the large unzipped folders.
COPY prediction.py .
COPY *.zip . 
# If your preprocessing objects are in a separate, small folder, copy them too:
# COPY Preprocessing\ Objects/ ./Preprocessing\ Objects/

# Stage 5: Unzip the model files and then immediately delete the .zip files
# This creates the necessary model folders but doesn't leave the .zip archives in the final image layer.
RUN unzip '*.zip' && rm *.zip

# Stage 6: Expose the port the Flask app runs on
EXPOSE 5001

# Stage 7: The command to run the application
CMD ["python", "prediction.py"]

